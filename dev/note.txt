BUG: 
- [X] animation size bug.
- [X] need a better game loop. current is way too fast.
	+ the problem is not the game loop. the implementation is right, just need to do it.
- [X] wrap all engine functions to a single file.
- [X] create scene system as an object.
- [X] engine object to store all the engine property such as currScene, pause, draw, debug, etc.
- [X] the implementation of press and release arent working properly
- [] the sprite/animation didnt show when pressing `CTRL + F5`. maybe due to opening the scene first before adding the sprite/animation data. or maybe it should be load asynchrodnously.

TODO:
- [X] set the origin at the center of the entity.
- [X] flip sprite horizontally.
- [X] organize as modules and using advance keyword such static.
- [X] adding support for unrepeatable when pressing input.
- [X] setup the canvas.
- [X] tryout to make simple editor.
- [X] generate script with boiler plate for the game logic based on the data.
- [X] save file in JSON format.
- [] change scene's variable name on boilerplate based on its name   
- [] collision solver and its abstraction.
- [] steering stuff and physics for 2d platformer game
- [] runtime code editor ?
- [] refresh the page programmatically.
- [] generate all the panels and its css from the editor.js
- [] implement camera.
- [] making SceneMenu.
- [] start building the game.
- [] proper type checking for every parameters for better debugging.
- [] ordering all the APIs alphabetically, so it easier to navigate to.

NOTE:
- Scene system
	+ has its own update function
	+ has its own draw function
	+ has its own input function
	+ has its own logic function
	+ in short, it has its own data uniquely to every scene
- Learn about javascripts import mechanism, so only add one tag script in the HTML
- for the Y-Sort, just need to sort the entity obj, its cheaper and didnt the order wasnt really matter, bcs it is a map anyway.
- the input implementation was overlapping if the game intended (consist of multiple scenes) to be made in a single file.
- Editor building blocks
	+ Button
	+ Label
	+ InputText
	+ Dropdown
	+ radio button
	+ Drag and Drop entities
	+ Gizmo
	+ VBox and HBox
- when clicked
	+ entity details
	+ scene details
- The usage of the editor:
	+ create scenes, add entities, changes entities with position.
	+ saved all of that data into a JSON file.
	+ generate boilerplate script for the game logic.
	+ need to save editor state for play and stop button 
	+ 'play' button : disabled all the editor stuff, enable input and game logic.
	+ 'stop' button : enable all the editor stuff, disabled input and game logic, reset back to last state.
- Editor Limitation :
	+ if building this way, it would be pretty hard to manage the read and write files.
	- its good for save files but not for game implementaion itself.
	- so, the editor will just used for set scenes, entities, components, and assets.
	- need to refresh the entire thing and add the script tag to the html for implementation manually.
	- the refresh the page and add script tag maybe are doable with async stuff
- The purpose of this editor is to ditch the setup part entirely and completely ditch support for wrote game logic inside the editor


